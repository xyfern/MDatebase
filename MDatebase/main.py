# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MDateBase.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog,QTableWidget,QTableWidgetItem,QAbstractItemView, QMessageBox
import sqlite3

def reb(x):
    return x[0]

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 500)
        MainWindow.setBaseSize(QtCore.QSize(16, 9))
        MainWindow.setWindowTitle("MDateBase")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(20, 35, 760, 400))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.tableWidget.setDisabled(True)
        self.tableWidget.horizontalHeader().setSortIndicatorShown(True)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setObjectName("menubar")
        self.menu_file = QtWidgets.QMenu()
        self.menu_file.setTitle("Файл")
        self.menu_file.setObjectName("menufile")
        self.menubar.addMenu(self.menu_file)
        self.menu_edit = QtWidgets.QMenu()
        self.menu_edit.setTitle("Редактировать")
        self.menu_edit.setObjectName("menuedit")
        self.menubar.addMenu(self.menu_edit)
        self.menubar.addAction(self.menu_file.menuAction())
        self.menubar.addAction(self.menu_edit.menuAction())
        self.menu_edit.menuAction().setDisabled(True)
        self.menu_file.addAction("Открыть...", self.open)
        self.menu_file.addAction("Создать...", self.create)
        self.menu_file.addAction("Сохранить", self.save)
        self.menu_edit.addAction("Создать таблицу", self.create_table)
        self.menu_edit.addAction("Удалить текущую таблицу", self.delete_table)
        MainWindow.setMenuBar(self.menubar)
        self.combobox_selecttable = QtWidgets.QComboBox(self.centralwidget)
        self.combobox_selecttable.setGeometry(250,5,100,25)
        self.button_edit  = QtWidgets.QPushButton(self.centralwidget)
        self.button_edit.setGeometry(20,5,170,25)
        self.button_edit.setText("Включить редактирование")
        self.lable_t = QtWidgets.QLabel(self.centralwidget)
        self.lable_t.setText("Таблица:")
        self.lable_t.setGeometry(200,5,100,25)
        
        self.button_update = QtWidgets.QPushButton(self.centralwidget)
        self.button_update.setGeometry(360,5,70,25)
        self.button_update.setText("Обновить")
        
        self.button_addrow = QtWidgets.QPushButton(self.centralwidget)
        self.button_addrow.setGeometry(440,5,100,25)
        self.button_addrow.setText("Добавить строку")

        self.button_delrow = QtWidgets.QPushButton(self.centralwidget)
        self.button_delrow.setGeometry(550,5,100,25)
        self.button_delrow.setText("Удалить строку")
       
        self.button_edittable = QtWidgets.QPushButton(self.centralwidget)
        self.button_edittable.setGeometry(660,5,110,25)
        self.button_edittable.setText("Изменить Таблицу")

        self.button_edit.setHidden(True)
        self.button_update.setHidden(True)
        self.button_addrow.setHidden(True)
        self.button_edittable.setHidden(True)
        self.button_delrow.setHidden(True)

        self.error = QMessageBox()
        self.error.setWindowTitle("Ошибка")
        self.error.setIcon(QMessageBox.Icon.Warning)
        self.error.setStandardButtons(QMessageBox.StandardButton.Ok)

        self.add_note = QMessageBox()
        self.add_note.setStyleSheet("QLabel{min-width: 500px;min-height: 500px;}")
        self.add_note.setWindowTitle("Добавьте новую запись")
        self.add_note.addButton("Сохранить", QMessageBox.ButtonRole.AcceptRole)
        self.add_note.addButton("Отмена", QMessageBox.ButtonRole.RejectRole)

        self.note_table = QTableWidget(self.add_note)
        self.note_table.setGeometry(QtCore.QRect(20,35,500, 430))
        self.note_table.setColumnCount(3)
        self.note_table.setHorizontalHeaderItem(0,QTableWidgetItem("Столбец"))
        self.note_table.setHorizontalHeaderItem(1,QTableWidgetItem("Тип данных"))
        self.note_table.setHorizontalHeaderItem(2,QTableWidgetItem("Значение"))

        self.add_table_window = QMessageBox()
        self.add_table_window.setStyleSheet("QLabel{min-width: 500px;min-height: 500px;}")
        self.add_table_window.setWindowTitle("Добавьте новую запись")
        self.add_table_window.addButton("Создать", QMessageBox.ButtonRole.AcceptRole)
        self.add_table_window.addButton("Отмена", QMessageBox.ButtonRole.RejectRole)

        self.button_addfield = QtWidgets.QPushButton(self.add_table_window)
        self.button_addfield.setGeometry(20,70,100,20)
        self.button_addfield.setText("Добавить поле")

        self.window_edittableview = QtWidgets.QMessageBox()
        self.window_edittableview.setStyleSheet("QLabel{min-width: 500px;min-height: 450px;}")
        self.window_edittableview.addButton("Ок", QMessageBox.ButtonRole.AcceptRole)
        self.window_edittableview.addButton("Отмена", QMessageBox.ButtonRole.RejectRole)
        self.table_edittableview = QTableWidget(self.window_edittableview)
        self.table_edittableview.setGeometry(QtCore.QRect(20,20,500, 430))
        self.table_edittableview.setColumnCount(6)
        self.table_edittableview.setHorizontalHeaderItem(0,QTableWidgetItem("Название"))
        self.table_edittableview.setHorizontalHeaderItem(1,QTableWidgetItem("Тип данных"))
        self.table_edittableview.setHorizontalHeaderItem(2,QTableWidgetItem("NN"))
        self.table_edittableview.setColumnWidth(2,20)
        self.table_edittableview.setHorizontalHeaderItem(3,QTableWidgetItem("PK"))
        self.table_edittableview.setColumnWidth(3,20)
        self.table_edittableview.setHorizontalHeaderItem(4,QTableWidgetItem("AI"))
        self.table_edittableview.setColumnWidth(4,20)
        self.table_edittableview.setHorizontalHeaderItem(5,QTableWidgetItem("Un"))
        self.table_edittableview.setColumnWidth(5,20)

        
        self.window_edittable = QtWidgets.QMessageBox()
        self.window_edittable.setStyleSheet("QLabel{min-width: 500px;min-height: 500px;}")
        self.window_edittable.addButton("Сохранить", QMessageBox.ButtonRole.AcceptRole)
        self.window_edittable.addButton("Отмена", QMessageBox.ButtonRole.RejectRole)
        
        self.label_tablename = QtWidgets.QLabel(self.window_edittable)
        self.label_tablename.setText("Название:")
        self.label_tablename.setGeometry(25, -230, 100, 35)
        
        self.table_edittable = QTableWidget(self.window_edittable)
        self.table_edittable.setGeometry(QtCore.QRect(20,80,500, 430))
        self.table_edittable.setColumnCount(6)
        self.table_edittable.setHorizontalHeaderItem(0,QTableWidgetItem("Название"))
        self.table_edittable.setHorizontalHeaderItem(1,QTableWidgetItem("Тип данных"))
        self.table_edittable.setHorizontalHeaderItem(2,QTableWidgetItem("NN"))
        self.table_edittable.setColumnWidth(2,20)
        self.table_edittable.setHorizontalHeaderItem(3,QTableWidgetItem("PK"))
        self.table_edittable.setColumnWidth(3,20)
        self.table_edittable.setHorizontalHeaderItem(4,QTableWidgetItem("AI"))
        self.table_edittable.setColumnWidth(4,20)
        self.table_edittable.setHorizontalHeaderItem(5,QTableWidgetItem("Un"))
        self.table_edittable.setColumnWidth(5,20)
        
        self.button_add_edittable = QtWidgets.QPushButton(self.window_edittable)
        self.button_add_edittable.setGeometry(QtCore.QRect(20, 50, 100, 20))
        self.button_add_edittable.setText("Добавить")

        self.button_del_edittable = QtWidgets.QPushButton(self.window_edittable)
        self.button_del_edittable.setGeometry(QtCore.QRect(130, 50, 100, 20))
        self.button_del_edittable.setText("Удалить")

        self.input_tablename = QtWidgets.QTextEdit(self.window_edittable)
        self.input_tablename.setGeometry(90, 10, 100, 25)

            
        self.signals()
        
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    
    def signals(self):
        #события
        self.tableWidget.itemChanged.connect(self.on_itemChanged)
        self.combobox_selecttable.currentTextChanged.connect(lambda: self.add_in_table(self.combobox_selecttable.currentText()))
        #кнопки
        self.button_edit.clicked.connect(self.edit_mode)
        self.button_update.clicked.connect(lambda: self.add_in_table(self.combobox_selecttable.currentText()))
        self.button_addrow.clicked.connect(lambda: self.diaolog_input(self.combobox_selecttable.currentText()))
        self.add_note.buttonClicked.connect(self.edit_notetable)
        self.button_edittable.clicked.connect(self.fill_edittable)
        self.window_edittable.buttonClicked.connect(self.edittable)
        self.button_add_edittable.clicked.connect(lambda: self.add_field())
        self.button_del_edittable.clicked.connect(lambda: self.del_field())
        self.button_delrow.clicked.connect(lambda: self.delrow())
        self.tableWidget.horizontalHeader().sortIndicatorChanged.connect(self.sort_column)
        
    def delrow(self):
        table = self.combobox_selecttable.currentText()
        if table:
            rowid = self.tableWidget.item(self.tableWidget.rowCount()-1,0).type()
            self.sql.execute(f"""DELETE FROM {table} WHERE rowid={rowid}""")
            self.tableWidget.setRowCount(self.tableWidget.rowCount()-1)
    
    def sort_column(self,a):
        self.button_edit.setText("Включить редактирование")
        order = self.tableWidget.horizontalHeader().sortIndicatorOrder()
        table = self.combobox_selecttable.currentText()
        header = self.tableWidget.horizontalHeaderItem(a).text()
        self.tableWidget.setRowCount(0)
        desc = ""
        if order:
            desc = " DESC"
        sql = f"""SELECT rowid, * FROM {table} ORDER BY {header}{desc};"""
        i = 0
        for row in self.sql.execute(sql):
            rowid = row[0]
            rowPosition = self.tableWidget.rowCount()
            self.tableWidget.insertRow(rowPosition)
            j = 0
            print(row)
            for elem in row[1:]:
                if elem != None:
                    item = QTableWidgetItem(str(elem),rowid)
                    self.tableWidget.setItem(i,j,item)
                j += 1
            i += 1
        self.button_edit.setText("Выключить редактирование")
        self.tableWidget.setDisabled(False)

    def fill_edittable(self):
        table = self.combobox_selecttable.currentText()
        for i in self.sql.execute(f"""SELECT * from sqlite_schema where name = '{table}'"""):
            str = i[4].split(table)[1]
            str = str.lstrip().rstrip()
            str = str[1:-1]
        print(str)
        self.table_edittableview.setRowCount(0)
        for i in str.split(","):
            i = i.lstrip().rstrip()
            name = i.split()[0]
            type = i.split()[1]
            primary_key = False
            notnull = False
            unique = False
            ai = False
            if "PRIMARY KEY" in i:
                primary_key = True
            if "NOT NULL" in i:
                notnull = True
            if "UNIQUE" in i:
                unique = True
            if "AUTOINCREMENT" in i:
                ai = True
            rowPosition = self.table_edittableview.rowCount()
            self.table_edittableview.insertRow(rowPosition)
            item = QTableWidgetItem(name)
            item.setFlags(item.flags() & QtCore.Qt.ItemFlag.ItemIsEditable)
            self.table_edittableview.setItem(self.table_edittableview.rowCount()-1,0,item)
            item = QTableWidgetItem(type)
            item.setFlags(item.flags() & QtCore.Qt.ItemFlag.ItemIsEditable)
            self.table_edittableview.setItem(self.table_edittableview.rowCount()-1,1,item)
            item = QtWidgets.QCheckBox()
            item.setChecked(notnull)
            item.setDisabled(True)
            self.table_edittableview.setCellWidget(self.table_edittableview.rowCount()-1,2,item)
            item = QtWidgets.QCheckBox()
            item.setChecked(primary_key)
            item.setDisabled(True)
            self.table_edittableview.setCellWidget(self.table_edittableview.rowCount()-1,3,item)
            item = QtWidgets.QCheckBox()
            item.setChecked(ai)
            item.setDisabled(True)
            self.table_edittableview.setCellWidget(self.table_edittableview.rowCount()-1,4,item)
            item = QtWidgets.QCheckBox()
            item.setChecked(unique)
            item.setDisabled(True)
            self.table_edittableview.setCellWidget(self.table_edittableview.rowCount()-1,5,item)
        
        self.window_edittableview.setWindowTitle("Добавьте новую запись")
        self.window_edittableview.exec()

    def edittable(self,a):
        if a.text() == "Сохранить":
            table_name = self.input_tablename.toPlainText()
            print(table_name)
            columnatrs = []
            for i in range(self.table_edittable.rowCount()):
                notnull = ""
                primary_key = ""
                ai = ""
                unique = ""
                column_name = self.table_edittable.item(i,0).text()
                type_name = self.table_edittable.cellWidget(i,1).currentText()
                if self.table_edittable.cellWidget(i,2).isChecked():
                    notnull = "NOT NULL"
                if self.table_edittable.cellWidget(i,3).isChecked():
                    primary_key = "PRIMARY KEY"
                    if self.table_edittable.cellWidget(i,4).isChecked():
                        ai = "AUTOINCREMENT"
                if self.table_edittable.cellWidget(i,5).isChecked():
                    unique = "UNIQUE"
                columnatr = f"""{column_name} {type_name} {primary_key} {ai} {notnull} {unique}""".lstrip().rstrip()
                print(columnatr)
                columnatrs.append(columnatr)
            atrs = ', \n'.join(columnatrs)
            sql_request = f"""CREATE TABLE {table_name} (
            {atrs});"""
            print(sql_request)
            try:
                self.sql.execute(sql_request)
                self.combobox_selecttable.addItem(table_name)
            except Exception as e:
                self.error.setText(f"Ошибка:{e.args}")
                self.error.exec_()
            
    def create_table(self):
        self.table_edittable.setRowCount(0)
        self.input_tablename.setText("")
        try:
            self.window_edittable.setWindowTitle("Создайте таблицу")
            self.window_edittable.exec()
        except Exception as e:
            self.error.setText(f"Ошибка:{e.args}")
            self.error.exec_()
    
    def delete_table(self):
        table = self.combobox_selecttable.currentText()
        self.sql.execute(f""" DROP TABLE {table};""")
        self.clear_table()
        self.combobox_selecttable.removeItem(self.combobox_selecttable.currentIndex())

    def add_field(self):
        rowPosition = self.table_edittable.rowCount()
        self.table_edittable.insertRow(rowPosition)
        self.table_edittable.setItem(rowPosition,0,QTableWidgetItem(f"Field{rowPosition+1}"))
        primary_key = False
        notnull = False
        unique = False
        ai = False
        item = QtWidgets.QComboBox()
        data_types = ["INTEGER","TEXT","BLOB","REAL","NUMERIC"]
        item.addItems(data_types)
        self.table_edittable.setCellWidget(self.table_edittable.rowCount()-1,1,item)
        item = QtWidgets.QCheckBox()
        item.setChecked(notnull)
        self.table_edittable.setCellWidget(self.table_edittable.rowCount()-1,2,item)
        item = QtWidgets.QCheckBox()
        item.setChecked(primary_key)
        self.table_edittable.setCellWidget(self.table_edittable.rowCount()-1,3,item)
        item = QtWidgets.QCheckBox()
        item.setChecked(ai)
        self.table_edittable.setCellWidget(self.table_edittable.rowCount()-1,4,item)
        item = QtWidgets.QCheckBox()
        item.setChecked(unique)
        self.table_edittable.setCellWidget(self.table_edittable.rowCount()-1,5,item)

    def del_field(self):
        self.table_edittable.setRowCount(self.table_edittable.rowCount()-1) 
    
    def edit_mode(self):
        if self.button_edit.text() == "Включить редактирование":
            self.button_edit.setText("Выключить редактирование")
            self.tableWidget.setDisabled(False)
        elif self.button_edit.text() == "Выключить редактирование":
            self.button_edit.setText("Включить редактирование")
            self.tableWidget.setDisabled(True)
    
    def on_itemChanged(self,a):# изменение значения
        if self.button_edit.text() == "Выключить редактирование":
            print(a.type(),a.row(),a.column(),a.text())
            new_text = a.text()
            column_name = self.tableWidget.horizontalHeaderItem(a.column()).text()
            table = self.combobox_selecttable.currentText()
            rowid = a.type()

            try:
                sql_q = f"""UPDATE main.{table} SET {column_name}='{new_text}' WHERE rowid={rowid}"""
                print(sql_q)
                self.sql.execute(sql_q)
                #self.add_in_table(table)
                
            except Exception as e:
                print(f"Ошибка:{e.args}")
                self.error.setText(f"Ошибка:{e.args}")
                self.error.exec_()
                sqlq = f"""SELECT {column_name} from {table} where _rowid_='{a.row()+1}'"""
                text = tuple(self.sql.execute(sqlq))[0][0]
                self.tableWidget.item(a.row(),a.column()).setText(str(text))
                # self.add_in_table(table)
        
    def add_in_table(self,table):
        if table:
            print(table)
            self.button_edit.setText("Включить редактирование")
            self.fill_table(table)
            self.button_edit.setText("Выключить редактирование")
            self.tableWidget.setDisabled(False)

    def sing(self,fname): # заполняет QMessageBox
        db = sqlite3.connect(fname)
        self.sql = db.cursor()
        print(list(self.sql.execute(f"""SELECT * from sqlite_schema""")))
        self.vs = self.sql.execute("""SELECT name FROM sqlite_schema WHERE type ='table' AND name NOT LIKE 'sqlite_%';""")
        self.combobox_selecttable.addItems(list(map(reb, list(self.vs))))
         
    def fill_table(self, table): # заполняет таблицу
        self.clear_table()
        
        for i in self.sql.execute(f"""select cid,name from pragma_table_info('{table}');"""):
            self.tableWidget.setColumnCount(i[0]+1)
            self.tableWidget.setHorizontalHeaderItem(i[0],QTableWidgetItem(i[1]))

        i = 0
        for row in self.sql.execute(f"""SELECT rowid,* from {table}"""):
            rowid = row[0]
            rowPosition = self.tableWidget.rowCount()
            self.tableWidget.insertRow(rowPosition)
            j = 0
            for elem in row[1:]:
                if elem != None:
                    item = QTableWidgetItem(str(elem),rowid)
                    self.tableWidget.setItem(i,j,item)
                j += 1
            i += 1

    def diaolog_input(self, table):
        self.note_table.setRowCount(0)
        
        i = 0
        for elem in self.sql.execute(f"""select name,type from pragma_table_info('{table}');"""):
            rowPosition = self.note_table.rowCount()
            self.note_table.insertRow(rowPosition)
            i1 = QTableWidgetItem(elem[0])
            i1.setFlags(i1.flags() & QtCore.Qt.ItemFlag.ItemIsEditable)
            self.note_table.setItem(i,0,i1)
            i2 = QTableWidgetItem(elem[1])
            i2.setFlags(i1.flags() & QtCore.Qt.ItemFlag.ItemIsEditable)
            self.note_table.setItem(i,1,i2)
            i+=1
        
        self.add_note.exec()
        
    def edit_notetable(self, a):
        print("t")
        print(a.text())
        if a.text() == "Сохранить":
            table = self.combobox_selecttable.currentText()
            print("t")
            try:
                elems = []
                print(elems)
                for i in range(self.note_table.rowCount()):
                    
                    if self.note_table.item(i,2) == None:
                        a = ""
                    else:
                        a = self.note_table.item(i,2).text()
                    elems.append(a)
                sql = self.sql.execute(f"""INSERT INTO {table} VALUES {tuple(elems)}""")
                self.add_in_table(table)
                print(sql)
            except Exception as e:
                self.error.setText(f"Ошибка:{e.args}")
                self.error.exec_()
        
    def clear_table(self): # очищает таблицу
        self.tableWidget.clear()
        self.tableWidget.setRowCount(0)
        self.tableWidget.setColumnCount(0)
    
    def setvisible(self):
        self.button_delrow.setHidden(False)
        self.button_edit.setHidden(False)
        self.button_update.setHidden(False)
        self.button_addrow.setHidden(False)
        self.button_edittable.setHidden(False)
        self.menu_edit.menuAction().setDisabled(False)

    def open(self):
        self.save()
        fname = QFileDialog.getOpenFileName()[0]
        if fname:
            self.combobox_selecttable.clear()
            self.clear_table()
            self.setvisible()
            self.sing(fname)

    def save(self):
        if self.combobox_selecttable.currentText():
            self.sql.connection.commit()
    
    def create(self):
        self.save()
        fname = QFileDialog.getSaveFileName(None,'','','Database (*.db)')[0]
        if fname:
            self.combobox_selecttable.clear()
            self.clear_table()
            self.setvisible()
            self.sing(fname)

    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())